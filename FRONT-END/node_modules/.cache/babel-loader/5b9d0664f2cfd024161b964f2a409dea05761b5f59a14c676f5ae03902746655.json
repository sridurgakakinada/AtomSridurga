{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\priya\\\\OneDrive - Saint Louis University\\\\Desktop\\\\FALL-2023\\\\PSD\\\\Atom\\\\FRONT-END\\\\src\\\\components\\\\DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./css/DoctorDashboard.css\"; // Create a CSS file for styling\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDoctorAnswers } from \"./DoctorAnswersContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DoctorDashboard() {\n  _s();\n  // const navigate = useNavigate();\n  const {\n    addDoctorAnswer\n  } = useDoctorAnswers();\n  const [selectedPatient, setSelectedPatient] = useState(null);\n  const [selectedQuery, setSelectedQuery] = useState(null);\n  const [answerSubmitted, setAnswerSubmitted] = useState(false);\n  const [answerDatabase, setAnswerDatabase] = useState(\"\");\n  const [patientsData, setPatientsData] = useState([]);\n  const [queriesData, setQueriesData] = useState([]);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    userName\n  } = location.state;\n  const [id, setId] = useState(null);\n  const [questionID, setQuestionID] = useState(null);\n  const [doctorList, setDoctorList] = useState([]);\n  const [docdesignation, setDoctorDesignation] = useState(\"\");\n  useEffect(() => {\n    // Fetch patient list from the server when the component mounts\n    fetchPatients();\n    fetchQueries();\n    fetchDoctorList();\n  }, []); // Empty dependency array to run the effect only once\n\n  const fetchDoctorList = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/getDoctorList\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch\");\n      }\n      const data = await response.json();\n      // console.log(data);\n      data.map((doctor, index) => {\n        if (doctor.doctorName == userName) {\n          setDoctorDesignation(doctor.doctorDesignation);\n        }\n      });\n      {\n        data.map((doctor, index) => {\n          if (doctor.doctorName === userName) {\n            setDoctorDesignation(doctor.doctorDesignation);\n          }\n        });\n      }\n      setDoctorList(data);\n    } catch (error) {\n      console.error(\"Error fetching doctor list:\", error);\n    }\n  };\n  const fetchPatients = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/getPatientList\");\n      if (response.ok) {\n        const data = await response.json();\n        // console.log(data);\n\n        setPatientsData(data); // Set the retrieved patient list in state\n      } else {\n        throw new Error(\"Failed to fetch patient list\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle error scenario: Display an error message or perform necessary actions\n    }\n  };\n\n  const fetchQueries = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/getQueriesForDoc\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userName: userName,\n          id: id\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setQueriesData(data);\n        // console.log(data);\n      } else {\n        throw new Error(\"Failed to fetch queries\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const sendQueries = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/SaveDoctorReplyToPatientQuery\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: userName,\n          id: id,\n          docreply: answerDatabase,\n          questionid: questionID\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        setQueriesData(data);\n      } else {\n        throw new Error(\"Failed to fetch queries\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const handlePatientClick = async patient => {\n    console.log(patient);\n    console.log(patientsData);\n    setSelectedPatient(patient);\n    setSelectedQuery(null);\n\n    // Assuming patientsData is the array of patients\n    const foundPatient = patientsData.find(patientData => patientData.username === patient.username);\n    console.log(patient.username);\n    if (foundPatient) {\n      setId(foundPatient.id);\n      // Set the id based on the found patient\n      console.log(foundPatient.id + 1);\n      try {\n        const response = await fetch(\"http://localhost:8080/Services/Health/getQueriesForDoc\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            userName: userName,\n            id: foundPatient.id // Use the found patient's id here\n          })\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setQueriesData(data);\n        } else {\n          throw new Error(\"Failed to fetch queries\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    } else {\n      console.error(\"Patient not found\");\n    }\n    // console.log()\n\n    const matchingQuery = queriesData[\"queryList\"][\"0\"].patientDetails.fullname === patient.patientName;\n    console.log(matchingQuery);\n    console.log(queriesData[\"queryList\"][\"0\"].questionId);\n    setQuestionID(queriesData[\"queryList\"][\"0\"].questionId);\n    if (matchingQuery) {\n      setSelectedQuery(queriesData[\"queryList\"][\"0\"]);\n    }\n  };\n  const handleAnswerSubmit = answer => {\n    // Handle submitting the answer to the backend or update state as needed\n    console.log(\"Submitted Answer:\", answer);\n    setAnswerDatabase(answer);\n    setAnswerSubmitted(true);\n    addDoctorAnswer(answer); // Add the answer to the context\n    console.log(answerSubmitted);\n    console.log(answerDatabase);\n    sendQueries();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Doctor Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doctor-dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patients-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Patients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: patientsData.filter(patient => patient.patientHealthHistory === docdesignation) // Filter patients based on matching doctor designation\n          .map((patient, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handlePatientClick(patient),\n            children: patient.patientName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"query-details\",\n        children: selectedQuery ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Query Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selectedQuery.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              setAnswerSubmitted(true);\n              sendQueries();\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"answer\",\n              children: \"Your Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"answer\",\n              name: \"answer\",\n              rows: \"4\",\n              required: true,\n              onChange: e => {\n                e.preventDefault();\n                setAnswerDatabase(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Submit Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this), answerSubmitted && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dialog-box\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Your answer has been submitted to the patient.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a query to view details and post an answer.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorDashboard, \"EsTDNPxb79ahSpwT+gx0bJV17bc=\", false, function () {\n  return [useDoctorAnswers, useLocation, useNavigate];\n});\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","useDoctorAnswers","jsxDEV","_jsxDEV","Fragment","_Fragment","DoctorDashboard","_s","addDoctorAnswer","selectedPatient","setSelectedPatient","selectedQuery","setSelectedQuery","answerSubmitted","setAnswerSubmitted","answerDatabase","setAnswerDatabase","patientsData","setPatientsData","queriesData","setQueriesData","location","navigate","userName","state","id","setId","questionID","setQuestionID","doctorList","setDoctorList","docdesignation","setDoctorDesignation","fetchPatients","fetchQueries","fetchDoctorList","response","fetch","ok","Error","data","json","map","doctor","index","doctorName","doctorDesignation","error","console","method","headers","body","JSON","stringify","sendQueries","username","docreply","questionid","log","handlePatientClick","patient","foundPatient","find","patientData","matchingQuery","patientDetails","fullname","patientName","questionId","handleAnswerSubmit","answer","children","fileName","_jsxFileName","lineNumber","columnNumber","className","filter","patientHealthHistory","onClick","question","onSubmit","e","preventDefault","htmlFor","name","rows","required","onChange","target","value","type","_c","$RefreshReg$"],"sources":["C:/Users/priya/OneDrive - Saint Louis University/Desktop/FALL-2023/PSD/Atom/FRONT-END/src/components/DoctorDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./css/DoctorDashboard.css\"; // Create a CSS file for styling\r\nimport {useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useDoctorAnswers } from \"./DoctorAnswersContext\";\r\n\r\nfunction DoctorDashboard() {\r\n  // const navigate = useNavigate();\r\n  const { addDoctorAnswer } = useDoctorAnswers();\r\n  const [selectedPatient, setSelectedPatient] = useState(null);\r\n  const [selectedQuery, setSelectedQuery] = useState(null);\r\n\r\n  const [answerSubmitted, setAnswerSubmitted] = useState(false);\r\n  const [answerDatabase, setAnswerDatabase] = useState(\"\");\r\n  const [patientsData, setPatientsData] = useState([]);\r\n  const [queriesData, setQueriesData] = useState([]);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { userName } = location.state;\r\n  const [id, setId] = useState(null);\r\n  const [questionID,setQuestionID]=useState(null);\r\n  const [doctorList, setDoctorList] = useState([]);\r\n  const[docdesignation,setDoctorDesignation]=useState(\"\");\r\n  useEffect(() => {\r\n    // Fetch patient list from the server when the component mounts\r\n    fetchPatients();\r\n    fetchQueries();\r\n    fetchDoctorList();\r\n  }, []); // Empty dependency array to run the effect only once\r\n\r\n    const fetchDoctorList = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:8080/Services/Health/getDoctorList\"\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        // console.log(data);\r\n        data.map((doctor,index)=>{\r\n          if(doctor.doctorName==userName){\r\n            setDoctorDesignation(doctor.doctorDesignation);\r\n          }\r\n        })\r\n        {data.map((doctor,index)=> {\r\n          if(doctor.doctorName===userName){\r\n            setDoctorDesignation(doctor.doctorDesignation);\r\n          }\r\n          })}\r\n        setDoctorList(data); \r\n       \r\n      } catch (error) {\r\n        console.error(\"Error fetching doctor list:\", error);\r\n      }\r\n    };\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/Services/Health/getPatientList\"\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        // console.log(data);\r\n\r\n        setPatientsData(data); // Set the retrieved patient list in state\r\n      } else {\r\n        throw new Error(\"Failed to fetch patient list\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      // Handle error scenario: Display an error message or perform necessary actions\r\n    }\r\n  };\r\n\r\n\r\n  const fetchQueries = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/Services/Health/getQueriesForDoc\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            userName: userName,\r\n            id: id,\r\n          }),\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setQueriesData(data);\r\n        // console.log(data);\r\n      } else {\r\n        throw new Error(\"Failed to fetch queries\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  const sendQueries = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/Services/Health/SaveDoctorReplyToPatientQuery\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            username: userName,\r\n            id: id,\r\n            docreply: answerDatabase,\r\n            questionid: questionID,\r\n          }),\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setQueriesData(data);\r\n      } else {\r\n        throw new Error(\"Failed to fetch queries\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  const handlePatientClick = async (patient) =>  {\r\n    console.log(patient);\r\n    console.log(patientsData);\r\n  setSelectedPatient(patient);\r\n  setSelectedQuery(null);\r\n  \r\n  // Assuming patientsData is the array of patients\r\n  const foundPatient = patientsData.find((patientData) => patientData.username === patient.username);\r\n  console.log(patient.username)\r\n  \r\n  if (foundPatient) {\r\n    setId(foundPatient.id);\r\n     // Set the id based on the found patient\r\n     console.log(foundPatient.id+1);\r\n  \r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/Services/Health/getQueriesForDoc\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            userName: userName,\r\n            id: foundPatient.id, // Use the found patient's id here\r\n          }),\r\n        }\r\n      );\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setQueriesData(data);\r\n      } else {\r\n        throw new Error(\"Failed to fetch queries\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  } else {\r\n    console.error(\"Patient not found\");\r\n  }\r\n    // console.log()\r\n\r\n    const matchingQuery =\r\n      queriesData[\"queryList\"][\"0\"].patientDetails.fullname ===\r\n      patient.patientName;\r\n    console.log(matchingQuery);\r\n    console.log(queriesData[\"queryList\"][\"0\"].questionId);\r\n    setQuestionID(queriesData[\"queryList\"][\"0\"].questionId);\r\n\r\n    if (matchingQuery) {\r\n      setSelectedQuery(queriesData[\"queryList\"][\"0\"]);\r\n    }\r\n  };\r\n\r\n \r\n  const handleAnswerSubmit = (answer) => {\r\n    // Handle submitting the answer to the backend or update state as needed\r\n    console.log(\"Submitted Answer:\", answer);\r\n\r\n    setAnswerDatabase(answer);\r\n    setAnswerSubmitted(true);\r\n    addDoctorAnswer(answer); // Add the answer to the context\r\n    console.log(answerSubmitted);\r\n    console.log(answerDatabase);\r\n    sendQueries();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>Doctor Dashboard</h1>\r\n        <h2>{userName}</h2>\r\n      </div>\r\n      <div className=\"doctor-dashboard\">\r\n        <div className=\"patients-list\">\r\n          <h2>Available Patients</h2>\r\n          <ul>\r\n          {patientsData\r\n            .filter((patient) => patient.patientHealthHistory === docdesignation) // Filter patients based on matching doctor designation\r\n            .map((patient, index) => (\r\n              <li key={index} onClick={() => handlePatientClick(patient)}>\r\n                {patient.patientName}\r\n              </li>\r\n            ))}\r\n        </ul>\r\n        </div>\r\n        {/* Selected Patient's Queries */}\r\n        {/* <div className=\"queries-list\">\r\n          <h2>Selected Patient's Queries</h2>\r\n          {selectedPatient ? (\r\n            <ul>\r\n              {selectedPatient.queries.map((query) => (\r\n                <li key={query.id} onClick={() => handleQueryClick(query)}>\r\n                  {query.question}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>Select a patient to view their queries.</p>\r\n          )}\r\n        </div> */}\r\n        {/* <div className=\"queries-list\">\r\n          <h2>Selected Patient's Queries</h2>\r\n          {selectedQuery ? (\r\n            <ul>\r\n              {selectedQuery.map((query) => (\r\n                <li key={query.id} onClick={() => handleQueryClick(query)}>\r\n                  {query.question}\r\n                </li>\r\n              ))}\r\n              {selectedQuery.question}\r\n            </ul>\r\n          ) : (\r\n            <p>No queries available for the selected patient.</p>\r\n          )}\r\n        </div> */}\r\n\r\n        {/* Selected Query Details and Answer Form */}\r\n        <div className=\"query-details\">\r\n          {selectedQuery ? (\r\n            <>\r\n              <h2>Query Details</h2>\r\n              <p>{selectedQuery.question}</p>\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  setAnswerSubmitted(true);\r\n                  sendQueries();\r\n                }}>\r\n                <label htmlFor=\"answer\">Your Answer:</label>\r\n                <textarea\r\n                  id=\"answer\"\r\n                  name=\"answer\"\r\n                  rows=\"4\"\r\n                  required\r\n                  onChange={(e) => {\r\n                    e.preventDefault();\r\n                    setAnswerDatabase(e.target.value);\r\n                  }}\r\n                />\r\n                <button type=\"submit\">Submit Answer</button>\r\n              </form>\r\n              {/* Dialog box to show the answer submission */}\r\n              {answerSubmitted && (\r\n                <div className=\"dialog-box\">\r\n                  <p>Your answer has been submitted to the patient.</p>\r\n                  {/* You can add additional content or close button here */}\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <p>Select a query to view details and post an answer.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorDashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}