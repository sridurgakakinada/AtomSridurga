{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\priya\\\\OneDrive - Saint Louis University\\\\Desktop\\\\FALL-2023\\\\PSD\\\\Atom\\\\FRONT-END\\\\src\\\\components\\\\MyChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./css/ChatBotIcon.css\"; // Import the CSS for the overlay\nimport { doctorClinicData } from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [chatOpen, setChatOpen] = useState(false);\n  const [inputText, setInputText] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [conversationState, setConversationState] = useState(\"greeting\");\n  const [isAskingName, setIsAskingName] = useState(false);\n  const toggleChatWindow = () => {\n    setChatOpen(!chatOpen);\n    if (!chatOpen) {\n      // If the chat window is opening, initiate the conversation with a greeting\n      setConversationState(\"greeting\");\n      setIsAskingName(false);\n      setMessages([]); // Clear previous messages\n    }\n  };\n\n  // Function to handle user input for \"Invalid Pin Code\"\n  const handleInvalidPinCode = () => {\n    // Show the options again\n    const optionsMessage = {\n      type: 'bot',\n      buttons: [{\n        text: 'Get Health information',\n        onClick: () => handleGetHealthInfo('Get Health information')\n      }, {\n        text: 'Find Nearest Client',\n        onClick: () => handleFindNearestClient('Find Nearest Client')\n      }]\n    };\n    setMessages(prevMessages => [...prevMessages, optionsMessage]);\n    setConversationState('options');\n  };\n\n  // Function to handle user input for \"Get Health information\"\n  const handleGetHealthInfo = () => {\n    const healthMessage = {\n      type: 'bot',\n      text: 'You selected \"Get Health information.\" Here is some health information:',\n      info: ['Maintain a balanced diet with a variety of fruits and vegetables.', 'Engage in regular physical activity for at least 30 minutes a day.', 'Ensure proper hydration by drinking an adequate amount of water.', 'Get enough quality sleep, aiming for 7-9 hours per night.', 'Manage stress through relaxation techniques like meditation or deep breathing.', 'Avoid smoking and limit alcohol consumption for better overall health.']\n    };\n    setMessages(prevMessages => [...prevMessages, healthMessage]);\n\n    // Follow up with a message asking for the user's next action\n    const nextActionMessage = {\n      type: 'bot',\n      text: 'What else would you like to do?',\n      buttons: [{\n        text: 'Get Health information',\n        onClick: () => handleGetHealthInfo('Get Health information')\n      }, {\n        text: 'Find Nearest Client',\n        onClick: () => handleFindNearestClient('Find Nearest Client')\n      }]\n    };\n    setMessages(prevMessages => [...prevMessages, nextActionMessage]);\n    setConversationState('options');\n  };\n\n  // Function to handle user input for \"Find Nearest Client\"\n  const handleFindNearestClient = () => {\n    const pinCodeRequestMessage = {\n      type: 'bot',\n      text: 'Please enter the pin code of your location:'\n    };\n    setMessages(prevMessages => [...prevMessages, pinCodeRequestMessage]);\n    setConversationState('askPinCode');\n  };\n  const handleUserInput = text => {\n    const userMessage = {\n      type: 'user',\n      text\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    if (isAskingName) {\n      // Handle the case where we are asking for the user's name\n      const userName = text;\n      const nameMessage = {\n        type: 'bot',\n        text: `Nice to meet you, ${userName}! What would you like to know?`\n      };\n      setMessages(prevMessages => [...prevMessages, nameMessage]);\n      const optionsMessage = {\n        type: 'bot',\n        buttons: [{\n          text: 'Get Health information',\n          onClick: () => handleGetHealthInfo('Get Health information')\n        }, {\n          text: 'Find Nearest Client',\n          onClick: () => handleFindNearestClient('Find Nearest Client')\n        }]\n      };\n      setMessages(prevMessages => [...prevMessages, optionsMessage]);\n      setConversationState(\"options\");\n      setIsAskingName(false);\n    } else {\n      // Handle the conversation based on the current state\n      switch (conversationState) {\n        case \"greeting\":\n          // Greet the user and ask for their name\n          if (text.toLowerCase() === \"Get Health information\" || text.toLowerCase() === \"Find Nearest Client\") {\n            // If the user's input matches one of the options, proceed accordingly\n            handleUserInput(text);\n          } else {\n            const greetingMessage = {\n              type: 'bot',\n              text: 'Hello! What is your name?'\n            };\n            setMessages(prevMessages => [...prevMessages, greetingMessage]);\n            setIsAskingName(true);\n          }\n          break;\n        case \"options\":\n          // Handle user options and responses\n          if (text.toLowerCase() === \"Get Health information\") {\n            // User selected \"Get Health information\"\n            const healthMessage = {\n              type: 'bot',\n              text: 'You selected \"Get Health information.\" Here is some health information...'\n            };\n            setMessages(prevMessages => [...prevMessages, healthMessage]);\n            // You can add the logic for providing health information here\n          } else if (text.toLowerCase() === \"Find Nearest Client\") {\n            // User selected \"Find Nearest Client\"\n            const pinCodeRequestMessage = {\n              type: 'bot',\n              text: 'Please enter the pin code of your location:'\n            };\n            setMessages(prevMessages => [...prevMessages, pinCodeRequestMessage]);\n            setConversationState(\"askPinCode\"); // This is important to transition to asking for the pin code.\n          } else {\n            // User input doesn't match any option\n            const invalidMessage = {\n              type: 'bot',\n              text: \"I'm sorry, I didn't understand your choice. Please select one of the options.\"\n            };\n            setMessages(prevMessages => [...prevMessages, invalidMessage]);\n          }\n          break;\n        case \"askPinCode\":\n          console.log('Doctor Clinic Data:', doctorClinicData);\n          const pinCode = text;\n          const locationData = doctorClinicData[pinCode];\n          if (locationData) {\n            const clinics = locationData.clinics;\n            const clinicResponseMessage = {\n              type: 'bot',\n              text: `Here are the clinics near your location (${pinCode}):`,\n              buttons: clinics.map(clinic => ({\n                text: `${clinic.name} - ${clinic.address}`,\n                onClick: () => alert(`You clicked on ${clinic.name}`)\n              }))\n            };\n            setMessages(prevMessages => [...prevMessages, clinicResponseMessage]);\n\n            // After displaying clinic info, add a new set of options\n            const newOptionsMessage = {\n              type: 'bot',\n              text: 'What else would you like to do?',\n              buttons: [{\n                text: 'Get Health information',\n                onClick: () => handleGetHealthInfo('Get Health information')\n              }, {\n                text: 'Find Nearest Client',\n                onClick: () => handleFindNearestClient('Find Nearest Client')\n              }]\n            };\n            setMessages(prevMessages => [...prevMessages, newOptionsMessage]);\n            setConversationState('options');\n          } else {\n            const invalidPinCodeMessage = {\n              type: 'bot',\n              text: \"I'm sorry, I couldn't find information for that pin code. Please try again with a valid pin code from the range 10001 to 10030.\"\n            };\n            setMessages(prevMessages => [...prevMessages, invalidPinCodeMessage]);\n            handleInvalidPinCode();\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    setInputText('');\n  };\n\n  // Determine the text for the button based on the conversation state\n  const buttonLabel = conversationState === 'greeting' ? \"\" : 'Chat';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatbotContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `ChatbotIcon ${chatOpen ? 'active' : ''}`,\n        onClick: toggleChatWindow,\n        title: \"ChatbotIcon\",\n        children: buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), chatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ChatWindow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ChatMessages\",\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: message.type,\n            children: message.type === 'bot' && message.buttons ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ButtonContainer\",\n              children: message.buttons.map((button, buttonIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: button.onClick,\n                children: button.text\n              }, buttonIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [message.text, message.info && /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: message.info.map((infoItem, itemIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: infoItem\n                }, itemIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 29\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 21\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ChatInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message...\",\n            value: inputText,\n            onChange: e => setInputText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUserInput(inputText),\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"45V2A40Zfmg7HmwS+v/xDvYCGLA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","doctorClinicData","jsxDEV","_jsxDEV","App","_s","chatOpen","setChatOpen","inputText","setInputText","messages","setMessages","conversationState","setConversationState","isAskingName","setIsAskingName","toggleChatWindow","handleInvalidPinCode","optionsMessage","type","buttons","text","onClick","handleGetHealthInfo","handleFindNearestClient","prevMessages","healthMessage","info","nextActionMessage","pinCodeRequestMessage","handleUserInput","userMessage","userName","nameMessage","toLowerCase","greetingMessage","invalidMessage","console","log","pinCode","locationData","clinics","clinicResponseMessage","map","clinic","name","address","alert","newOptionsMessage","invalidPinCodeMessage","buttonLabel","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","message","index","button","buttonIndex","infoItem","itemIndex","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/priya/OneDrive - Saint Louis University/Desktop/FALL-2023/PSD/Atom/FRONT-END/src/components/MyChatBot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport \"./css/ChatBotIcon.css\"; // Import the CSS for the overlay\r\nimport { doctorClinicData } from './data';\r\n\r\nfunction App() {\r\n  const [chatOpen, setChatOpen] = useState(false);\r\n  const [inputText, setInputText] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [conversationState, setConversationState] = useState(\"greeting\");\r\n  const [isAskingName, setIsAskingName] = useState(false);\r\n\r\n  const toggleChatWindow = () => {\r\n    setChatOpen(!chatOpen);\r\n\r\n    if (!chatOpen) {\r\n      // If the chat window is opening, initiate the conversation with a greeting\r\n      setConversationState(\"greeting\");\r\n      setIsAskingName(false);\r\n      setMessages([]); // Clear previous messages\r\n    }\r\n  };\r\n\r\n  // Function to handle user input for \"Invalid Pin Code\"\r\nconst handleInvalidPinCode = () => {\r\n    \r\n    // Show the options again\r\n    const optionsMessage = {\r\n      type: 'bot',\r\n      buttons: [\r\n        {\r\n          text: 'Get Health information',\r\n          onClick: () => handleGetHealthInfo('Get Health information'),\r\n        },\r\n        {\r\n          text: 'Find Nearest Client',\r\n          onClick: () => handleFindNearestClient('Find Nearest Client'),\r\n        },\r\n      ],\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, optionsMessage]);\r\n  \r\n    setConversationState('options');\r\n  };\r\n\r\n  // Function to handle user input for \"Get Health information\"\r\nconst handleGetHealthInfo = () => {\r\n    const healthMessage = {\r\n      type: 'bot',\r\n      text: 'You selected \"Get Health information.\" Here is some health information:',\r\n      info: [\r\n        'Maintain a balanced diet with a variety of fruits and vegetables.',\r\n        'Engage in regular physical activity for at least 30 minutes a day.',\r\n        'Ensure proper hydration by drinking an adequate amount of water.',\r\n        'Get enough quality sleep, aiming for 7-9 hours per night.',\r\n        'Manage stress through relaxation techniques like meditation or deep breathing.',\r\n        'Avoid smoking and limit alcohol consumption for better overall health.',\r\n      ],\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, healthMessage]);\r\n  \r\n    // Follow up with a message asking for the user's next action\r\n    const nextActionMessage = {\r\n      type: 'bot',\r\n      text: 'What else would you like to do?',\r\n      buttons: [\r\n        {\r\n          text: 'Get Health information',\r\n          onClick: () => handleGetHealthInfo('Get Health information'),\r\n        },\r\n        {\r\n          text: 'Find Nearest Client',\r\n          onClick: () => handleFindNearestClient('Find Nearest Client'),\r\n        },\r\n      ],\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, nextActionMessage]);\r\n  \r\n    setConversationState('options');\r\n  };\r\n  \r\n  \r\n\r\n  // Function to handle user input for \"Find Nearest Client\"\r\n  const handleFindNearestClient = () => {\r\n    const pinCodeRequestMessage = {\r\n      type: 'bot',\r\n      text: 'Please enter the pin code of your location:',\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, pinCodeRequestMessage]);\r\n    setConversationState('askPinCode');\r\n  };\r\n\r\n  const handleUserInput = (text) => {\r\n    const userMessage = {\r\n      type: 'user',\r\n      text,\r\n    };\r\n\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n    if (isAskingName) {\r\n      // Handle the case where we are asking for the user's name\r\n      const userName = text;\r\n      const nameMessage = {\r\n        type: 'bot',\r\n        text: `Nice to meet you, ${userName}! What would you like to know?`,\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, nameMessage]);\r\n\r\n      const optionsMessage = {\r\n        type: 'bot',\r\n        buttons: [\r\n          {\r\n            text: 'Get Health information',\r\n            onClick: () => handleGetHealthInfo('Get Health information'),\r\n          },\r\n          {\r\n            text: 'Find Nearest Client',\r\n            onClick: () => handleFindNearestClient('Find Nearest Client'),\r\n          },\r\n        ],\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, optionsMessage]);\r\n\r\n      setConversationState(\"options\");\r\n      setIsAskingName(false);\r\n    } else {\r\n      // Handle the conversation based on the current state\r\n      switch (conversationState) {\r\n        case \"greeting\":\r\n          // Greet the user and ask for their name\r\n          if (text.toLowerCase() === \"Get Health information\" || text.toLowerCase() === \"Find Nearest Client\") {\r\n            // If the user's input matches one of the options, proceed accordingly\r\n            handleUserInput(text);\r\n          } else {\r\n            const greetingMessage = {\r\n              type: 'bot',\r\n              text: 'Hello! What is your name?',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, greetingMessage]);\r\n            setIsAskingName(true);\r\n          }\r\n          break;\r\n\r\n        case \"options\":\r\n          // Handle user options and responses\r\n          if (text.toLowerCase() === \"Get Health information\") {\r\n            // User selected \"Get Health information\"\r\n            const healthMessage = {\r\n              type: 'bot',\r\n              text: 'You selected \"Get Health information.\" Here is some health information...',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, healthMessage]);\r\n            // You can add the logic for providing health information here\r\n          } else if (text.toLowerCase() === \"Find Nearest Client\") {\r\n            // User selected \"Find Nearest Client\"\r\n            const pinCodeRequestMessage = {\r\n              type: 'bot',\r\n              text: 'Please enter the pin code of your location:',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, pinCodeRequestMessage]);\r\n            setConversationState(\"askPinCode\"); // This is important to transition to asking for the pin code.\r\n          } else {\r\n            // User input doesn't match any option\r\n            const invalidMessage = {\r\n              type: 'bot',\r\n              text: \"I'm sorry, I didn't understand your choice. Please select one of the options.\",\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, invalidMessage]);\r\n\r\n\r\n          }\r\n          break;\r\n\r\n        case \"askPinCode\":\r\n          console.log('Doctor Clinic Data:', doctorClinicData);\r\n\r\n          const pinCode = text;\r\n          const locationData = doctorClinicData[pinCode];\r\n          \r\n          if (locationData) {\r\n            const clinics = locationData.clinics;\r\n\r\n            const clinicResponseMessage = {\r\n              type: 'bot',\r\n              text: `Here are the clinics near your location (${pinCode}):`,\r\n              buttons: clinics.map((clinic) => ({\r\n                text: `${clinic.name} - ${clinic.address}`,\r\n                onClick: () => alert(`You clicked on ${clinic.name}`),\r\n              })),\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, clinicResponseMessage]);\r\n\r\n            \r\n            // After displaying clinic info, add a new set of options\r\n          const newOptionsMessage = {\r\n            type: 'bot',\r\n            text: 'What else would you like to do?',\r\n            buttons: [\r\n              {\r\n                text: 'Get Health information',\r\n                onClick: () => handleGetHealthInfo('Get Health information'),\r\n              },\r\n              {\r\n                text: 'Find Nearest Client',\r\n                onClick: () => handleFindNearestClient('Find Nearest Client'),\r\n              },\r\n            ],\r\n          };\r\n          setMessages((prevMessages) => [...prevMessages, newOptionsMessage]);\r\n\r\n          setConversationState('options');\r\n\r\n\r\n          } \r\n          else {\r\n            const invalidPinCodeMessage = {\r\n              type: 'bot',\r\n              text: \"I'm sorry, I couldn't find information for that pin code. Please try again with a valid pin code from the range 10001 to 10030.\",\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, invalidPinCodeMessage]);\r\n            handleInvalidPinCode();\r\n          }\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    setInputText('');\r\n  };\r\n\r\n  // Determine the text for the button based on the conversation state\r\n  const buttonLabel = conversationState === 'greeting' ? \"\" : 'Chat';\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"ChatbotContainer\">\r\n        <button className={`ChatbotIcon ${chatOpen ? 'active' : ''}`} onClick={toggleChatWindow} \r\n        title=\"ChatbotIcon\">\r\n          {buttonLabel}\r\n        </button>\r\n        {chatOpen && (\r\n          <div className=\"ChatWindow\">\r\n            <div className=\"ChatMessages\">\r\n              {messages.map((message, index) => (\r\n                <div key={index} className={message.type}>\r\n                  {message.type === 'bot' && message.buttons ? (\r\n                    <div className=\"ButtonContainer\">\r\n                      {message.buttons.map((button, buttonIndex) => (\r\n                        <button key={buttonIndex} onClick={button.onClick}>\r\n                          {button.text}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <div>\r\n                      {message.text}\r\n                      {message.info && (\r\n                        <ul>\r\n                          {message.info.map((infoItem, itemIndex) => (\r\n                            <li key={itemIndex}>{infoItem}</li>\r\n                          ))}\r\n                        </ul>\r\n                      )}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"ChatInput\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type your message...\"\r\n                value={inputText}\r\n                onChange={(e) => setInputText(e.target.value)}\r\n              />\r\n              <button onClick={() => handleUserInput(inputText)}>Send</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}