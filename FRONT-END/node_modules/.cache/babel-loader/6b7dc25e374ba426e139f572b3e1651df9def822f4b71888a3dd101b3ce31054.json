{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\priya\\\\OneDrive - Saint Louis University\\\\Desktop\\\\FALL-2023\\\\PSD\\\\Atom\\\\FRONT-END\\\\src\\\\components\\\\UserDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// import \"./css/UserDashboard.css\"; // Make sure to create the corresponding CSS file\n\nimport \"./css/UserDashboard.css\";\nimport { Link } from \"react-router-dom\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { Button } from \"bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDoctorAnswers } from \"./DoctorAnswersContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserDashboard(props) {\n  _s();\n  // If you receive props from a parent component\n  // Ensure receivedProps are defined from the props received\n  const {\n    receivedProps\n  } = props;\n  const {\n    doctorAnswers\n  } = useDoctorAnswers();\n  const [doctorReplies, setDoctorReplies] = useState(false);\n  const [doctorList, setDoctorList] = useState([]);\n\n  // const [userName, setUsername] = useState(\"\");\n  // const location = useLocation();\n  // const { state } = location;\n  // const username = state && state.username ? state.username : \"\";\n  // console.log(\"the user name is : \", username);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    userName\n  } = location.state;\n  const organ = [{\n    name: \"Heart\",\n    description: \"The heart pumps blood through the circulatory system. \",\n    imageUrl: \"https://cdn-icons-png.flaticon.com/128/954/954406.png\"\n  }, {\n    name: \"Lungs\",\n    description: \"Lungs facilitate the exchange of oxygen and carbon dioxide.\",\n    imageUrl: \"https://cdn-icons-png.flaticon.com/128/8986/8986317.png\"\n  }, {\n    name: \"Brain\",\n    description: \"The brain is the control center of the nervous system.\",\n    imageUrl: \"https://cdn-icons-png.flaticon.com/128/2864/2864309.png\"\n  }, {\n    name: \"Liver\",\n    description: \"The liver performs various vital functions in the body.\",\n    imageUrl: \"https://cdn-icons-png.flaticon.com/128/8855/8855321.png\"\n  }, {\n    name: \"Kidneys\",\n    description: \"Kidneys filter blood and remove waste and excess fluids.\",\n    imageUrl: \"https://cdn-icons-png.flaticon.com/128/508/508785.png\"\n  }, {\n    name: \"Skin\",\n    description: \"The skin is the body's largest organ, providing protection.\",\n    imageUrl: \"https://cdn-icons-png.flaticon.com/128/4148/4148578.png\"\n  }, {\n    name: \"Eyes\",\n    description: \"Eyes are sensory organs for vision and light perception.\",\n    imageUrl: \"https://cdn-icons-png.flaticon.com/128/2547/2547870.png\"\n  }, {\n    name: \"Bones\",\n    description: \"Bones support the body and protect internal organs.\",\n    imageUrl: \"https://cdn-icons-png.flaticon.com/128/6800/6800942.png\"\n  }];\n  useEffect(() => {\n    const fetchDoctorList = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8080/Services/Health/getDoctorList\");\n        if (response.ok) {\n          const data = await response.json();\n          setDoctorList(data[0]); // Set the received doctor list to the state\n        } else {\n          throw new Error(\"Failed to fetch doctor list\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n        // Handle error\n      }\n    };\n\n    const fetchDoctorReplies = async () => {\n      try {\n        const response = await fetch(\"http://localhost:8080/Services/Health/getQueriesForDoc\", {\n          method: \"POST\",\n          // Use the appropriate HTTP method (POST/GET/PUT) for fetching replies\n          headers: {\n            \"Content-Type\": \"application/json\"\n            // Include other necessary headers\n          },\n\n          // Include any necessary request body or parameters\n          body: JSON.stringify({\n            userName: \"doc\",\n            id: \"1\"\n          }) // Assuming receivedProps contains the username\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setDoctorReplies(data[\"queryList\"][0].reply);\n        } else {\n          throw new Error(\"Failed to fetch doctor's replies\");\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n        // Handle error\n      }\n    };\n\n    fetchDoctorReplies();\n    fetchDoctorList();\n  }, []); // Fetc\n\n  const handleDetailsClick = (organ, navigate) => {\n    navigate(`/Organ-detail/${organ.name}`, {\n      state: {\n        organDetails: {\n          username: userName,\n          name: organ.name,\n          description: organ.description,\n          imageUrl: organ.imageUrl\n          // imageUrl: organ.imageUrl, // Add URL string for the image if needed\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"welcome\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome, \", userName, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"doctor-answers\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [doctorReplies && /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [doctorList.doctorName, \" : \", doctorList.doctorDesignation]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), doctorReplies && /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Doctor Answers: \", doctorReplies]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-dashboard\",\n      children: organ.map((organ, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dashboard-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: organ.imageUrl,\n          alt: organ.name,\n          style: {\n            maxWidth: \"100px\",\n            maxHeight: \"100px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            color: \"black\"\n          },\n          children: organ.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: \"black\"\n          },\n          children: organ.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDetailsClick(organ, navigate),\n          children: \"Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(UserDashboard, \"cX08WJX8q/mNt+HO0xCbQTVZlvQ=\", false, function () {\n  return [useDoctorAnswers, useLocation, useNavigate];\n});\n_c = UserDashboard;\nexport default UserDashboard;\nvar _c;\n$RefreshReg$(_c, \"UserDashboard\");","map":{"version":3,"names":["React","useEffect","useState","Link","useLocation","useHistory","Button","useNavigate","useDoctorAnswers","jsxDEV","_jsxDEV","UserDashboard","props","_s","receivedProps","doctorAnswers","doctorReplies","setDoctorReplies","doctorList","setDoctorList","location","navigate","userName","state","organ","name","description","imageUrl","fetchDoctorList","response","fetch","ok","data","json","Error","error","console","fetchDoctorReplies","method","headers","body","JSON","stringify","id","reply","handleDetailsClick","organDetails","username","children","className","fileName","_jsxFileName","lineNumber","columnNumber","doctorName","doctorDesignation","map","index","src","alt","style","maxWidth","maxHeight","color","onClick","_c","$RefreshReg$"],"sources":["C:/Users/priya/OneDrive - Saint Louis University/Desktop/FALL-2023/PSD/Atom/FRONT-END/src/components/UserDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// import \"./css/UserDashboard.css\"; // Make sure to create the corresponding CSS file\r\n\r\nimport \"./css/UserDashboard.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport { Button } from \"bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDoctorAnswers } from \"./DoctorAnswersContext\";\r\n\r\nfunction UserDashboard(props) {\r\n  // If you receive props from a parent component\r\n  // Ensure receivedProps are defined from the props received\r\n  const { receivedProps } = props;\r\n  const { doctorAnswers } = useDoctorAnswers();\r\n\r\n  const [doctorReplies, setDoctorReplies] = useState(false);\r\n  const [doctorList, setDoctorList] = useState([]);\r\n\r\n  // const [userName, setUsername] = useState(\"\");\r\n  // const location = useLocation();\r\n  // const { state } = location;\r\n  // const username = state && state.username ? state.username : \"\";\r\n  // console.log(\"the user name is : \", username);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { userName } = location.state;\r\n\r\n  const organ = [\r\n    {\r\n      name: \"Heart\",\r\n      description: \"The heart pumps blood through the circulatory system. \",\r\n\r\n      imageUrl: \"https://cdn-icons-png.flaticon.com/128/954/954406.png\",\r\n    },\r\n    {\r\n      name: \"Lungs\",\r\n      description:\r\n        \"Lungs facilitate the exchange of oxygen and carbon dioxide.\",\r\n\r\n      imageUrl: \"https://cdn-icons-png.flaticon.com/128/8986/8986317.png\",\r\n    },\r\n    {\r\n      name: \"Brain\",\r\n      description: \"The brain is the control center of the nervous system.\",\r\n\r\n      imageUrl: \"https://cdn-icons-png.flaticon.com/128/2864/2864309.png\",\r\n    },\r\n    {\r\n      name: \"Liver\",\r\n      description: \"The liver performs various vital functions in the body.\",\r\n\r\n      imageUrl: \"https://cdn-icons-png.flaticon.com/128/8855/8855321.png\",\r\n    },\r\n    {\r\n      name: \"Kidneys\",\r\n      description: \"Kidneys filter blood and remove waste and excess fluids.\",\r\n\r\n      imageUrl: \"https://cdn-icons-png.flaticon.com/128/508/508785.png\",\r\n    },\r\n    {\r\n      name: \"Skin\",\r\n      description:\r\n        \"The skin is the body's largest organ, providing protection.\",\r\n\r\n      imageUrl: \"https://cdn-icons-png.flaticon.com/128/4148/4148578.png\",\r\n    },\r\n    {\r\n      name: \"Eyes\",\r\n      description: \"Eyes are sensory organs for vision and light perception.\",\r\n\r\n      imageUrl: \"https://cdn-icons-png.flaticon.com/128/2547/2547870.png\",\r\n    },\r\n    {\r\n      name: \"Bones\",\r\n      description: \"Bones support the body and protect internal organs.\",\r\n\r\n      imageUrl: \"https://cdn-icons-png.flaticon.com/128/6800/6800942.png\",\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const fetchDoctorList = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:8080/Services/Health/getDoctorList\"\r\n        );\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setDoctorList(data[0]); // Set the received doctor list to the state\r\n        } else {\r\n          throw new Error(\"Failed to fetch doctor list\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n        // Handle error\r\n      }\r\n    };\r\n\r\n    const fetchDoctorReplies = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:8080/Services/Health/getQueriesForDoc\",\r\n          {\r\n            method: \"POST\", // Use the appropriate HTTP method (POST/GET/PUT) for fetching replies\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              // Include other necessary headers\r\n            },\r\n            // Include any necessary request body or parameters\r\n            body: JSON.stringify({\r\n              userName: \"doc\",\r\n              id: \"1\",\r\n            }), // Assuming receivedProps contains the username\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setDoctorReplies(data[\"queryList\"][0].reply);\r\n        } else {\r\n          throw new Error(\"Failed to fetch doctor's replies\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n        // Handle error\r\n      }\r\n    };\r\n\r\n    fetchDoctorReplies();\r\n    fetchDoctorList();\r\n  }, []); // Fetc\r\n\r\n  const handleDetailsClick = (organ, navigate) => {\r\n    navigate(`/Organ-detail/${organ.name}`, {\r\n      state: {\r\n        organDetails: {\r\n          username: userName,\r\n          name: organ.name,\r\n          description: organ.description,\r\n          imageUrl: organ.imageUrl,\r\n          // imageUrl: organ.imageUrl, // Add URL string for the image if needed\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"welcome\">\r\n        <h1>Welcome, {userName}!</h1>{\" \"}\r\n        <div className=\"doctor-answers\">\r\n          <p>\r\n            {doctorReplies && (\r\n              <h2>\r\n                {doctorList.doctorName} : {doctorList.doctorDesignation}\r\n              </h2>\r\n            )}\r\n            {doctorReplies && <h2>Doctor Answers: {doctorReplies}</h2>}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"user-dashboard\">\r\n        \r\n        {organ.map((organ, index) => (\r\n          <div key={index} className=\"dashboard-card\">\r\n            <img\r\n              src={organ.imageUrl}\r\n              alt={organ.name}\r\n              style={{ maxWidth: \"100px\", maxHeight: \"100px\" }}\r\n            />\r\n            <h3 style={{ color: \"black\" }}>{organ.name}</h3>\r\n            <p style={{ color: \"black\" }}>{organ.description}</p>\r\n            <button onClick={() => handleDetailsClick(organ, navigate)}>\r\n              Details\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserDashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}