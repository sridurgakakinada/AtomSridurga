{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\priya\\\\OneDrive - Saint Louis University\\\\Desktop\\\\FALL-2023\\\\PSD\\\\Atom\\\\FRONT-END\\\\src\\\\components\\\\DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./css/DoctorDashboard.css\"; // Create a CSS file for styling\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useDoctorAnswers } from \"./DoctorAnswersContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DoctorDashboard() {\n  _s();\n  // const navigate = useNavigate();\n  const {\n    addDoctorAnswer\n  } = useDoctorAnswers();\n  const [selectedPatient, setSelectedPatient] = useState(null);\n  const [selectedQuery, setSelectedQuery] = useState(null);\n  const [answerSubmitted, setAnswerSubmitted] = useState(false);\n  const [answerDatabase, setAnswerDatabase] = useState(\"\");\n  const [patientsData, setPatientsData] = useState([]);\n  const [queriesData, setQueriesData] = useState([]);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    userName\n  } = location.state;\n  const [id, setId] = useState(null);\n  const [doctorList, setDoctorList] = useState([]);\n  useEffect(() => {\n    // Fetch patient list from the server when the component mounts\n    fetchPatients();\n    fetchQueries();\n    fetchDoctorList();\n  }, []); // Empty dependency array to run the effect only once\n  const fetchDoctorList = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/getDoctorList\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch\");\n      }\n      const data = await response.json();\n      console.log(data);\n      setDoctorList(data);\n    } catch (error) {\n      console.error(\"Error fetching doctor list:\", error);\n    }\n  };\n  const fetchPatients = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/getPatientList\");\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        setPatientsData(data); // Set the retrieved patient list in state\n      } else {\n        throw new Error(\"Failed to fetch patient list\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle error scenario: Display an error message or perform necessary actions\n    }\n  };\n\n  const fetchQueries = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/getQueriesForDoc\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userName: userName,\n          id: \"1\"\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // console.log(data);\n        setQueriesData(data);\n        console.log(data);\n      } else {\n        throw new Error(\"Failed to fetch queries\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const sendQueries = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/SaveDoctorReplyToPatientQuery\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: userName,\n          id: id,\n          docreply: answerDatabase,\n          questionid: \"1\"\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        // console.log(data);\n        setQueriesData(data);\n      } else {\n        throw new Error(\"Failed to fetch queries\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const handlePatientClick = patient => {\n    setSelectedPatient(patient);\n    setSelectedQuery(null);\n    console.log(patient);\n    console.log(patientsData);\n    patientsData.forEach((patient1, index) => {\n      if (patient1.username === patient.username) {\n        setId(index + 1);\n        console.log(\"the ID is: \", index + 1);\n        console.log(\"the full name is: \", patient1.username);\n      }\n    });\n    const matchingQuery = queriesData[\"queryList\"][\"0\"].patientDetails.fullname === patient.patientName;\n    console.log(matchingQuery);\n    console.log(queriesData[\"queryList\"][\"0\"]);\n    if (matchingQuery) {\n      setSelectedQuery(queriesData[\"queryList\"][\"0\"]);\n    }\n  };\n\n  // const handleQueryClick = (query) => {\n  //   setSelectedQuery(query);\n  //   console.log(\"Selected Query:\", selectedQuery);\n  // };\n\n  const handleAnswerSubmit = answer => {\n    // Handle submitting the answer to the backend or update state as needed\n    console.log(\"Submitted Answer:\", answer);\n    setAnswerDatabase(answer);\n    setAnswerSubmitted(true);\n    addDoctorAnswer(answer); // Add the answer to the context\n    console.log(answerSubmitted);\n    console.log(answerDatabase);\n    sendQueries();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Doctor Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doctor-dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patients-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Patients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: patientsData.map((patient, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handlePatientClick(patient),\n            children: patient.patientName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"query-details\",\n        children: selectedQuery ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Query Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selectedQuery.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              setAnswerSubmitted(true);\n              sendQueries();\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"answer\",\n              children: \"Your Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"answer\",\n              name: \"answer\",\n              rows: \"4\",\n              required: true,\n              onChange: e => {\n                e.preventDefault();\n                setAnswerDatabase(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Submit Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), answerSubmitted && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dialog-box\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Your answer has been submitted to the patient.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a query to view details and post an answer.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorDashboard, \"/2vpo1Jwz1AUgi7WvXWdhHIJ6po=\", false, function () {\n  return [useDoctorAnswers, useLocation, useNavigate];\n});\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","useDoctorAnswers","jsxDEV","_jsxDEV","Fragment","_Fragment","DoctorDashboard","_s","addDoctorAnswer","selectedPatient","setSelectedPatient","selectedQuery","setSelectedQuery","answerSubmitted","setAnswerSubmitted","answerDatabase","setAnswerDatabase","patientsData","setPatientsData","queriesData","setQueriesData","location","navigate","userName","state","id","setId","doctorList","setDoctorList","fetchPatients","fetchQueries","fetchDoctorList","response","fetch","ok","Error","data","json","console","log","error","method","headers","body","JSON","stringify","sendQueries","username","docreply","questionid","handlePatientClick","patient","forEach","patient1","index","matchingQuery","patientDetails","fullname","patientName","handleAnswerSubmit","answer","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","onClick","question","onSubmit","e","preventDefault","htmlFor","name","rows","required","onChange","target","value","type","_c","$RefreshReg$"],"sources":["C:/Users/priya/OneDrive - Saint Louis University/Desktop/FALL-2023/PSD/Atom/FRONT-END/src/components/DoctorDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./css/DoctorDashboard.css\"; // Create a CSS file for styling\r\nimport {useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useDoctorAnswers } from \"./DoctorAnswersContext\";\r\n\r\nfunction DoctorDashboard() {\r\n  // const navigate = useNavigate();\r\n  const { addDoctorAnswer } = useDoctorAnswers();\r\n  const [selectedPatient, setSelectedPatient] = useState(null);\r\n  const [selectedQuery, setSelectedQuery] = useState(null);\r\n\r\n  const [answerSubmitted, setAnswerSubmitted] = useState(false);\r\n  const [answerDatabase, setAnswerDatabase] = useState(\"\");\r\n\r\n  const [patientsData, setPatientsData] = useState([]);\r\n  const [queriesData, setQueriesData] = useState([]);\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { userName } = location.state;\r\n  const [id, setId] = useState(null);\r\n  const [doctorList, setDoctorList] = useState([]);\r\n  useEffect(() => {\r\n    // Fetch patient list from the server when the component mounts\r\n    fetchPatients();\r\n    fetchQueries();\r\n    fetchDoctorList();\r\n  }, []); // Empty dependency array to run the effect only once\r\n    const fetchDoctorList = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"http://localhost:8080/Services/Health/getDoctorList\"\r\n        );\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setDoctorList(data); \r\n       \r\n      } catch (error) {\r\n        console.error(\"Error fetching doctor list:\", error);\r\n      }\r\n    };\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/Services/Health/getPatientList\"\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(data);\r\n\r\n        setPatientsData(data); // Set the retrieved patient list in state\r\n      } else {\r\n        throw new Error(\"Failed to fetch patient list\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      // Handle error scenario: Display an error message or perform necessary actions\r\n    }\r\n  };\r\n\r\n\r\n  const fetchQueries = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/Services/Health/getQueriesForDoc\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            userName: userName,\r\n            id: \"1\",\r\n          }),\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        // console.log(data);\r\n        setQueriesData(data);\r\n        console.log(data);\r\n      } else {\r\n        throw new Error(\"Failed to fetch queries\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  const sendQueries = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/Services/Health/SaveDoctorReplyToPatientQuery\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            username: userName,\r\n            id: id,\r\n            docreply: answerDatabase,\r\n            questionid: \"1\",\r\n          }),\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        // console.log(data);\r\n        setQueriesData(data);\r\n      } else {\r\n        throw new Error(\"Failed to fetch queries\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  const handlePatientClick = (patient) => {\r\n    setSelectedPatient(patient);\r\n    setSelectedQuery(null);\r\n    console.log(patient)\r\n    console.log(patientsData);\r\n    patientsData.forEach((patient1, index) => {\r\n      if (patient1.username === patient.username) {\r\n        setId(index + 1);\r\n        console.log(\"the ID is: \", index + 1);\r\n        console.log(\"the full name is: \", patient1.username);\r\n      }\r\n    });\r\n\r\n\r\n\r\n    const matchingQuery =\r\n      queriesData[\"queryList\"][\"0\"].patientDetails.fullname ===\r\n      patient.patientName;\r\n    console.log(matchingQuery);\r\n    console.log(queriesData[\"queryList\"][\"0\"]);\r\n\r\n    if (matchingQuery) {\r\n      setSelectedQuery(queriesData[\"queryList\"][\"0\"]);\r\n    }\r\n  };\r\n\r\n  // const handleQueryClick = (query) => {\r\n  //   setSelectedQuery(query);\r\n  //   console.log(\"Selected Query:\", selectedQuery);\r\n  // };\r\n\r\n  const handleAnswerSubmit = (answer) => {\r\n    // Handle submitting the answer to the backend or update state as needed\r\n    console.log(\"Submitted Answer:\", answer);\r\n\r\n    setAnswerDatabase(answer);\r\n    setAnswerSubmitted(true);\r\n    addDoctorAnswer(answer); // Add the answer to the context\r\n    console.log(answerSubmitted);\r\n    console.log(answerDatabase);\r\n    sendQueries();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>Doctor Dashboard</h1>\r\n        <h2>{userName}</h2>\r\n      </div>\r\n\r\n      <div className=\"doctor-dashboard\">\r\n        {/* Available Patients List */}\r\n        <div className=\"patients-list\">\r\n          <h2>Available Patients</h2>\r\n          <ul>\r\n            {patientsData.map((patient, index) => (\r\n              <li key={index} onClick={() => handlePatientClick(patient)}>\r\n                {patient.patientName}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        {/* Selected Patient's Queries */}\r\n        {/* <div className=\"queries-list\">\r\n          <h2>Selected Patient's Queries</h2>\r\n          {selectedPatient ? (\r\n            <ul>\r\n              {selectedPatient.queries.map((query) => (\r\n                <li key={query.id} onClick={() => handleQueryClick(query)}>\r\n                  {query.question}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>Select a patient to view their queries.</p>\r\n          )}\r\n        </div> */}\r\n        {/* <div className=\"queries-list\">\r\n          <h2>Selected Patient's Queries</h2>\r\n          {selectedQuery ? (\r\n            <ul>\r\n              {selectedQuery.map((query) => (\r\n                <li key={query.id} onClick={() => handleQueryClick(query)}>\r\n                  {query.question}\r\n                </li>\r\n              ))}\r\n              {selectedQuery.question}\r\n            </ul>\r\n          ) : (\r\n            <p>No queries available for the selected patient.</p>\r\n          )}\r\n        </div> */}\r\n\r\n        {/* Selected Query Details and Answer Form */}\r\n        <div className=\"query-details\">\r\n          {selectedQuery ? (\r\n            <>\r\n              <h2>Query Details</h2>\r\n              <p>{selectedQuery.question}</p>\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  setAnswerSubmitted(true);\r\n                  sendQueries();\r\n                }}>\r\n                <label htmlFor=\"answer\">Your Answer:</label>\r\n                <textarea\r\n                  id=\"answer\"\r\n                  name=\"answer\"\r\n                  rows=\"4\"\r\n                  required\r\n                  onChange={(e) => {\r\n                    e.preventDefault();\r\n                    setAnswerDatabase(e.target.value);\r\n                  }}\r\n                />\r\n                <button type=\"submit\">Submit Answer</button>\r\n              </form>\r\n              {/* Dialog box to show the answer submission */}\r\n              {answerSubmitted && (\r\n                <div className=\"dialog-box\">\r\n                  <p>Your answer has been submitted to the patient.</p>\r\n                  {/* You can add additional content or close button here */}\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <p>Select a query to view details and post an answer.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorDashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}